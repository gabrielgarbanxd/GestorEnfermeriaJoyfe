-- //===>> GetAllCalendarEventsProcedure calendar tasks procedure <<===//
DROP PROCEDURE IF EXISTS `GetAllCalendarEventsProcedure`;

DELIMITER $$ -- Cambio del delimitador
CREATE PROCEDURE GetAllCalendarEventsProcedure(
    IN p_per_page INT,
    IN p_page INT,
    OUT p_Result INT
)
BEGIN
    DECLARE p_offset INT;

    -- Verificar que el número de página sea mayor a 0
    IF p_page < 1 THEN
        SET p_Result = -1; -- Código de error para número de página inválido
        LEAVE; -- Salir del procedimiento almacenado
    END IF;

    -- Verificar que el número de registros por página sea mayor a 0
    IF p_per_page < 1 THEN
        SET p_Result = -2; -- Código de error para número de registros por página inválido
        LEAVE; -- Salir del procedimiento almacenado
    END IF;

    -- Calcular el número de registros a omitir
    SET p_offset = (p_page - 1) * p_per_page;

    -- Obtener el número total de registros
    SELECT COUNT(*) INTO p_Result FROM calendar;

    -- Verificar que el número de registros a omitir sea menor al número total de registros
    IF p_offset >= p_Result THEN
        SET p_Result = -3; -- Código de error para número de página inválido
        LEAVE; -- Salir del procedimiento almacenado
    END IF;

    -- Obtener los registros de la página actual
    SELECT * FROM calendar LIMIT p_per_page OFFSET p_offset;
END$$
DELIMITER ; -- Restaurar el delimitador original



-- //===>> GetCalendarTaskByIdProcedure calendar tasks procedure <<===//
DROP PROCEDURE IF EXISTS `GetCalendarTaskByIdProcedure`;

DELIMITER $$

CREATE PROCEDURE `GetCalendarTaskByIdProcedure`(
    IN p_id INT
)
BEGIN

    -- Obtener la tarea del calendario por ID
    SELECT * FROM calendar WHERE id = p_id;

END$$

DELIMITER ;


-- //===>> CreateCalendarTaskProcedure calendar tasks procedure <<===//
DROP PROCEDURE IF EXISTS `CreateCalendarTaskProcedure`;

DELIMITER $$ -- Cambio del delimitador
CREATE PROCEDURE CreateCalendarTaskProcedure(
    IN p_date DATE,
    IN p_task TEXT,
    OUT p_Result INT
)
BEGIN
    -- Verificar que la fecha no sea nula
    IF p_date IS NULL THEN 
        SET p_Result = -1; -- Código de error para fecha nula
        LEAVE;
    END IF;

    -- Verificar que la tarea no sea nula
    IF p_task IS NULL THEN
        SET p_Result = -2; -- Código de error para tarea nula
        LEAVE;
    END IF;

    -- Insertar nueva tarea del calendario
    INSERT INTO calendar(date, task)
    VALUES(p_date, p_task);

    -- Verificar si la inserción fue exitosa
    IF ROW_COUNT() > 0 THEN
        SET p_Result = LAST_INSERT_ID(); -- Devolver el ID de la tarea del calendario insertada
    ELSE
        SET p_Result = 0; -- Código de error para inserción no exitosa
    END IF;
END$$
DELIMITER ; -- Restaurar el delimitador original



-- //===>> UpdateCalendarTaskProcedure calendar tasks procedure <<===//
DROP PROCEDURE IF EXISTS `UpdateCalendarTaskProcedure`;

DELIMITER $$ -- Cambio del delimitador
CREATE PROCEDURE UpdateCalendarTaskProcedure(
    IN p_id INT,
    IN p_date DATE,
    IN p_task TEXT,
    OUT p_Result INT
)
BEGIN
    -- Verificar si la tarea del calendario existe
    IF NOT EXISTS (SELECT * FROM calendar WHERE id = p_id) THEN
        SET p_Result = -1; -- Código de error para tarea del calendario no encontrada
        LEAVE; -- Salir del procedimiento almacenado
    END IF;

    -- Verificar que la fecha no sea nula
    IF p_date IS NULL THEN 
        SET p_Result = -2; -- Código de error para fecha nula
        LEAVE;
    END IF;

    -- Verificar que la tarea no sea nula
    IF p_task IS NULL THEN
        SET p_Result = -3; -- Código de error para tarea nula
        LEAVE;
    END IF;

    -- Actualizar tarea del calendario
    UPDATE calendar
    SET date = p_date, task = p_task
    WHERE id = p_id;

    -- Verificar si la actualización fue exitosa
    IF ROW_COUNT() > 0 THEN
        SET p_Result = 1; -- Código de éxito
    ELSE
        SET p_Result = 0; -- Código de error para actualización no exitosa
    END IF;
END$$
DELIMITER ; -- Restaurar el delimitador original



-- //===>> DeleteCalendarTaskProcedure calendar tasks procedure <<===//
DROP PROCEDURE IF EXISTS `DeleteCalendarTaskProcedure`;

DELIMITER $$ -- Cambio del delimitador
CREATE PROCEDURE DeleteCalendarTaskProcedure(
    IN p_id INT,
    OUT p_Result INT
)
BEGIN
    -- Verificar si la tarea del calendario existe
    IF NOT EXISTS (SELECT * FROM calendar WHERE id = p_id) THEN
        SET p_Result = -1; -- Código de error para tarea del calendario no encontrada
        LEAVE; -- Salir del procedimiento almacenado
    END IF;

    -- Eliminar tarea del calendario
    DELETE FROM calendar WHERE id = p_id;

    -- Verificar si la eliminación fue exitosa
    SELECT id INTO p_Result FROM calendar WHERE id = p_id;

    -- Verificar si la eliminación fue exitosa
    IF p_Result > 0 THEN
        SET p_Result = 0; -- Código de error para eliminación no exitosa
    ELSE
        SET p_Result = p_id; -- Código de éxito
    END IF;
END$$
DELIMITER ; -- Restaurar el delimitador original